snippet module "Module template"
	{
		config,
		lib,
		options,
		pkgs,
		...
	}: let
		inherit (lib) mkEnableOption;

		cfg = config.mountainous.${1:NAME};
	in {
		options.mountainous.$1 = {
			enable = mkEnableOption "Whether to enable $1";
		};

		config = lib.mkIf cfg.enable {
			$0
		};
	}

snippet mkDefault 
	mkDefault = ${1:value};

snippet mkForce 
	mkForce = ${1:value};

snippet mkIf 
	mkIf = ${1:condition} ${2:value};

snippet mkMerge 
	mkMerge = [
		${1:value1}
		${2:value2}
	];

snippet mkOption 
	mkOption = {
		type = ${1:type};
		default = ${2:default};
		description = "$3";
		$0
	};

snippet mkEnableOption 
	enable = mkEnableOption "Whether to enable $1";

snippet mkPackageOption 
	mkPackageOption "$1";

snippet mkOverride 
	mkOverride ${1:priority} ${2:value};

snippet mapAttrs
	mapAttrs ${1:(name: value: value)} ${2:set};

snippet fold
	fold ${1:(value: sum: sum + value)} ${2:init} ${3:list};

snippet concatStrings
	concatStrings ${1:list};

snippet concatLists 
	concatLists ${1:list};

snippet filter 
	filter ${1:(value: value > 0)} ${2:list};

snippet removeAttrs
	removeAttrs ${1:set} ${2:list};

snippet attrNames
	attrNames ${1:set};

snippet attrValues
	attrValues ${1:set};

snippet catAttrs
	catAttrs "${1:attr}" ${2:list};

snippet filterAttrs
	filterAttrs ${1:(name: value: value > 0)} ${2:set};

snippet foldAttrs
	foldAttrs ${1:(name: value: sum: sum + value)} ${2:init} ${3:set};

snippet genAttrs
	genAttrs ${1:names} ${2:(name: value)};

snippet getAttr
	getAttr "${1:attr}" ${2:set};

snippet hasAttr
	hasAttr "${1:attr}" ${2:set};

snippet head
	head ${1:list};

snippet intersectAttrs
	intersectAttrs ${1:set1} ${2:set2};

snippet isAttrs
	isAttrs ${1:value};

snippet isList
	isList ${1:value};

snippet last
	last ${1:list};

snippet length
	length ${1:list};

snippet listToAttrs
	listToAttrs ${1:list};

snippet mapAttrsToList
	mapAttrsToList ${1:(name: value: value)} ${2:set};

snippet replaceStrings
	replaceStrings ${1:from} ${2:to} "${3:string}";

snippet setAttrByPath
	setAttrByPath ${1:path} ${2:value} ${3:set};

snippet sort
	sort ${1:(a: b: a < b)} ${2:list};

snippet splitString
	splitString "${1:regex}" "${2:string}";

snippet tail
	tail ${1:list};

snippet unique
	unique ${1:list};

snippet any
	any ${1:(value: value > 0)} ${2:list};

snippet all
	all ${1:(value: value > 0)} ${2:list};

snippet elem
	elem ${1:value} ${2:list};

snippet elemAt
	elemAt ${1:list} ${2:index};

snippet findFirst
	findFirst ${1:(value: value > 0)} ${2:list};

snippet flatten
	flatten ${1:list};

snippet groupBy
	groupBy ${1:(value: value > 0)} ${2:list};

snippet hasSuffix
	hasSuffix "${1:suffix}" "${2:string}";

snippet hasPrefix
	hasPrefix "${1:prefix}" "${2:string}";

snippet init
	init ${1:list};

snippet intersectLists
	intersectLists ${1:list1} ${2:list2};

snippet optionalAttrs
	optionalAttrs ${1:condition} ${2:attribute-set};

snippet range
	range ${1:from} ${2:to};

snippet recursiveUpdate
	recursiveUpdate ${1:attribute-set1} ${2:attribute-set2};

snippet reverseList
	reverseList ${1:list};

snippet stringLength
	stringLength "${1:string}";

snippet substring
	substring ${1:start} ${2:length} "${3:string}";

snippet take
	take ${1:count} ${2:list};

snippet zipAttrsWith
	zipAttrsWith ${1:(name: value1: value2: value1 + value2)} ${2:list1} ${3:list2};
